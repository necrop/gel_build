"""
add_missing_inflections
"""

from lxml import etree

import gelconfig
from lex.gel.fileiterator import FileIterator
from lex.oed.variants.variantscache import VariantsCache
from lex.oed.daterange import DateRange
from lex.wordclass.wordclass import Wordclass

VARIANTS_CACHE = VariantsCache(wordclasses=('NNS', 'VBZ', 'VBN', 'VBD'))
INFLECTIONS = {'NN': ('NNS',), 'VB': ('VBZ', 'VBD', 'VBN')}
MINIMUM_DATE = gelconfig.DATE_MINIMUM


def add_missing_inflections(in_dir, out_dir):
    """
    Add any inflections that are given in the entry's variants list, but
    which so far have not been generated by the inflection process.
    These get added as 'fragment' morphsets (@fragment=true)
    """
    iterator = FileIterator(in_dir=in_dir, out_dir=out_dir, verbosity='low')

    for filecontent in iterator.iterate():
        for entry in filecontent.entries:
            id = entry.oed_id()
            if entry.tag() == 's1' and VARIANTS_CACHE.id_exists(id):
                for wordclass_set in entry.wordclass_sets():
                    if wordclass_set.wordclass() in ('NN', 'VB'):
                        _process_wordclass_set(wordclass_set, id)


def _process_wordclass_set(wordclass_set, id):
    varset = VARIANTS_CACHE.find(id=id, wordclass=wordclass_set.wordclass())
    if varset:
        seen = set([type_unit.sort for type_unit in wordclass_set.types()])
        bucket = []
        for inflection in INFLECTIONS[wordclass_set.wordclass()]:
            for variant_form in varset.variants.get(inflection, []):
                if variant_form.sort in seen:
                    continue
                if variant_form.date.end < MINIMUM_DATE:
                    continue
                variant_form.wordclass = inflection
                bucket.append(variant_form)
                seen.add(variant_form.sort)

        for variant_form in bucket:
            morphset_node = etree.Element('morphSet', fragment='true')

            d1, d2 = variant_form.date.constrain((wordclass_set.date().start,
                                                  wordclass_set.date().end))
            daterange = DateRange(start=d1, end=d2, hardEnd=True)
            morphset_node.append(daterange.to_xml(omitProjected=True))
            if variant_form.regional:
                morphset_node.set('regional', 'true')
            if variant_form.irregular:
                morphset_node.set('irregular', 'true')

            type_node = etree.SubElement(morphset_node, 'type')
            form_node = etree.SubElement(type_node, 'form')
            form_node.text = variant_form.form
            type_node.append(Wordclass(variant_form.wordclass).to_xml())

            wordclass_set.morphset_block().append(morphset_node)

